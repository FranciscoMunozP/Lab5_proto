// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: protocolo.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Fulcrum_AgregarBase_FullMethodName     = "/main.Fulcrum/AgregarBase"
	Fulcrum_RenombrarBase_FullMethodName   = "/main.Fulcrum/RenombrarBase"
	Fulcrum_ActualizarValor_FullMethodName = "/main.Fulcrum/ActualizarValor"
	Fulcrum_BorrarBase_FullMethodName      = "/main.Fulcrum/BorrarBase"
	Fulcrum_GetEnemigos_FullMethodName     = "/main.Fulcrum/GetEnemigos"
	Fulcrum_Sincronizar_FullMethodName     = "/main.Fulcrum/Sincronizar"
	Fulcrum_Propagar_FullMethodName        = "/main.Fulcrum/propagar"
)

// FulcrumClient is the client API for Fulcrum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FulcrumClient interface {
	AgregarBase(ctx context.Context, in *DatosSector, opts ...grpc.CallOption) (*RespuestaReloj, error)
	RenombrarBase(ctx context.Context, in *DatosSectorRenombrar, opts ...grpc.CallOption) (*RespuestaReloj, error)
	ActualizarValor(ctx context.Context, in *DatosSectorActualizar, opts ...grpc.CallOption) (*RespuestaReloj, error)
	BorrarBase(ctx context.Context, in *DatosSectorConsulta, opts ...grpc.CallOption) (*RespuestaReloj, error)
	GetEnemigos(ctx context.Context, in *DatosSectorConsulta, opts ...grpc.CallOption) (*CantidadEnemigosResponse, error)
	Sincronizar(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*RespuestaSync, error)
	Propagar(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fulcrumClient struct {
	cc grpc.ClientConnInterface
}

func NewFulcrumClient(cc grpc.ClientConnInterface) FulcrumClient {
	return &fulcrumClient{cc}
}

func (c *fulcrumClient) AgregarBase(ctx context.Context, in *DatosSector, opts ...grpc.CallOption) (*RespuestaReloj, error) {
	out := new(RespuestaReloj)
	err := c.cc.Invoke(ctx, Fulcrum_AgregarBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) RenombrarBase(ctx context.Context, in *DatosSectorRenombrar, opts ...grpc.CallOption) (*RespuestaReloj, error) {
	out := new(RespuestaReloj)
	err := c.cc.Invoke(ctx, Fulcrum_RenombrarBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) ActualizarValor(ctx context.Context, in *DatosSectorActualizar, opts ...grpc.CallOption) (*RespuestaReloj, error) {
	out := new(RespuestaReloj)
	err := c.cc.Invoke(ctx, Fulcrum_ActualizarValor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) BorrarBase(ctx context.Context, in *DatosSectorConsulta, opts ...grpc.CallOption) (*RespuestaReloj, error) {
	out := new(RespuestaReloj)
	err := c.cc.Invoke(ctx, Fulcrum_BorrarBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) GetEnemigos(ctx context.Context, in *DatosSectorConsulta, opts ...grpc.CallOption) (*CantidadEnemigosResponse, error) {
	out := new(CantidadEnemigosResponse)
	err := c.cc.Invoke(ctx, Fulcrum_GetEnemigos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) Sincronizar(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*RespuestaSync, error) {
	out := new(RespuestaSync)
	err := c.cc.Invoke(ctx, Fulcrum_Sincronizar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) Propagar(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Fulcrum_Propagar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FulcrumServer is the server API for Fulcrum service.
// All implementations must embed UnimplementedFulcrumServer
// for forward compatibility
type FulcrumServer interface {
	AgregarBase(context.Context, *DatosSector) (*RespuestaReloj, error)
	RenombrarBase(context.Context, *DatosSectorRenombrar) (*RespuestaReloj, error)
	ActualizarValor(context.Context, *DatosSectorActualizar) (*RespuestaReloj, error)
	BorrarBase(context.Context, *DatosSectorConsulta) (*RespuestaReloj, error)
	GetEnemigos(context.Context, *DatosSectorConsulta) (*CantidadEnemigosResponse, error)
	Sincronizar(context.Context, *SyncRequest) (*RespuestaSync, error)
	Propagar(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedFulcrumServer()
}

// UnimplementedFulcrumServer must be embedded to have forward compatible implementations.
type UnimplementedFulcrumServer struct {
}

func (UnimplementedFulcrumServer) AgregarBase(context.Context, *DatosSector) (*RespuestaReloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgregarBase not implemented")
}
func (UnimplementedFulcrumServer) RenombrarBase(context.Context, *DatosSectorRenombrar) (*RespuestaReloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenombrarBase not implemented")
}
func (UnimplementedFulcrumServer) ActualizarValor(context.Context, *DatosSectorActualizar) (*RespuestaReloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActualizarValor not implemented")
}
func (UnimplementedFulcrumServer) BorrarBase(context.Context, *DatosSectorConsulta) (*RespuestaReloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrarBase not implemented")
}
func (UnimplementedFulcrumServer) GetEnemigos(context.Context, *DatosSectorConsulta) (*CantidadEnemigosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnemigos not implemented")
}
func (UnimplementedFulcrumServer) Sincronizar(context.Context, *SyncRequest) (*RespuestaSync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sincronizar not implemented")
}
func (UnimplementedFulcrumServer) Propagar(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propagar not implemented")
}
func (UnimplementedFulcrumServer) mustEmbedUnimplementedFulcrumServer() {}

// UnsafeFulcrumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FulcrumServer will
// result in compilation errors.
type UnsafeFulcrumServer interface {
	mustEmbedUnimplementedFulcrumServer()
}

func RegisterFulcrumServer(s grpc.ServiceRegistrar, srv FulcrumServer) {
	s.RegisterService(&Fulcrum_ServiceDesc, srv)
}

func _Fulcrum_AgregarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatosSector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).AgregarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fulcrum_AgregarBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).AgregarBase(ctx, req.(*DatosSector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_RenombrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatosSectorRenombrar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).RenombrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fulcrum_RenombrarBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).RenombrarBase(ctx, req.(*DatosSectorRenombrar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_ActualizarValor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatosSectorActualizar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).ActualizarValor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fulcrum_ActualizarValor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).ActualizarValor(ctx, req.(*DatosSectorActualizar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_BorrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatosSectorConsulta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).BorrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fulcrum_BorrarBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).BorrarBase(ctx, req.(*DatosSectorConsulta))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_GetEnemigos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatosSectorConsulta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).GetEnemigos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fulcrum_GetEnemigos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).GetEnemigos(ctx, req.(*DatosSectorConsulta))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_Sincronizar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).Sincronizar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fulcrum_Sincronizar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).Sincronizar(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_Propagar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).Propagar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fulcrum_Propagar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).Propagar(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Fulcrum_ServiceDesc is the grpc.ServiceDesc for Fulcrum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fulcrum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Fulcrum",
	HandlerType: (*FulcrumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgregarBase",
			Handler:    _Fulcrum_AgregarBase_Handler,
		},
		{
			MethodName: "RenombrarBase",
			Handler:    _Fulcrum_RenombrarBase_Handler,
		},
		{
			MethodName: "ActualizarValor",
			Handler:    _Fulcrum_ActualizarValor_Handler,
		},
		{
			MethodName: "BorrarBase",
			Handler:    _Fulcrum_BorrarBase_Handler,
		},
		{
			MethodName: "GetEnemigos",
			Handler:    _Fulcrum_GetEnemigos_Handler,
		},
		{
			MethodName: "Sincronizar",
			Handler:    _Fulcrum_Sincronizar_Handler,
		},
		{
			MethodName: "propagar",
			Handler:    _Fulcrum_Propagar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocolo.proto",
}

const (
	Broker_GetServer_FullMethodName = "/main.Broker/GetServer"
)

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	GetServer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServerResponse, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) GetServer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, Broker_GetServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility
type BrokerServer interface {
	GetServer(context.Context, *emptypb.Empty) (*ServerResponse, error)
	mustEmbedUnimplementedBrokerServer()
}

// UnimplementedBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (UnimplementedBrokerServer) GetServer(context.Context, *emptypb.Empty) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}

// UnsafeBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServer will
// result in compilation errors.
type UnsafeBrokerServer interface {
	mustEmbedUnimplementedBrokerServer()
}

func RegisterBrokerServer(s grpc.ServiceRegistrar, srv BrokerServer) {
	s.RegisterService(&Broker_ServiceDesc, srv)
}

func _Broker_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broker_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetServer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Broker_ServiceDesc is the grpc.ServiceDesc for Broker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServer",
			Handler:    _Broker_GetServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocolo.proto",
}
